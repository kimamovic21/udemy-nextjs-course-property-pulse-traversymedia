Udemy Nextjs Course Property Pulse Traversymedia


Section 1. Introduction

01. Welcome To The Course
02. PropertyPulse Project Demo
03. A Note On The Project Structure
04. What is Next.js ?
05. Environment Setup


Section 2. Next.js Fundamentals & Project Start

06. New Project & Folder Structure

07. Layout, Homepage & Metadata
-u folderu app kreiramo komponentu layout.jsx
-u komponenti layout.jsx kreiramo funkciju MainLayout()
-funkciji MainLayout() dodajemo parametar destruktuirani prop children
-kreiramo komponentu page.jsx
-kreiramo folder assets
-u folderu assets kreiramo folder styles i globals.css fajl
-u komponentu layout.jsx importujemo globals.css fajl
-kreiramo i eksportujemo varijablu const metadata

08. File-Based Routing
-kreiramo folder properties i komponentu page.jsx 
-u folderu properties kreiramo folder add i komponentu page.jsx
-u folderu properties kreiramo folder [id] i komponentu page.jsx
-u komponentu app/page.jsx importujemo komponentu Link

09. Server vs Client Components & Router Hooks
-u komponentu [id]/page.jsx importujemo i kreiramo funkciju useRouter iz paketa Next Navigation
-vrijednost funkcije useRouter() pohranjujemo u varijablu const router
-dodajemo direktivu 'use client'
-importujemo i kreiramo funkciju useParams()
-vrijednost funkcije useParams() pohranjujemo u destruktuiranu varijablu const { id }
-importujemo i kreiramo funkciju useSearchParams()
-vrijednost funkcije useSearchParams() pohranjujemo u varijablu const searchParams
-importujemo i kreiramo funkciju usePathname()
-vrijednost funkcije usePathname() pohranjujemo u varijablu const pathname

10. Start On The Navbar
-preuzmemo folder _theme_files
-kreiramo folder components i komponentu Navbar.jsx
-u komponentu layout.jsx importujemo komponentu Navbar.jsx
-u komponentu Navbar.jsx importujemo komponentu Images iz paketa Next Image
-importujemo slike logo i profileDefault

11. Navbar Links, Dropdowns & React Icons
-u komponentu Navbar.jsx importujemo komponentu Link
-preimenujemo HTML elemente <a> sa komponentom Link
-u terminalu instaliramo paket React Icons
-importujemo funkciju useState()
-kreiramo state varijablu isMobileMenuOpen i set funkciju setIsMobileMenuOpen
-u div elementu za Mobile menu button, button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju setIsMobileMenuOpen
-u jsx dodajemo uslov {isMobileMenuOpen && (...)} i div element za Mobile menu
-kreiramo state varijablu isProfileMenuOpen i set funkciju setIsProfileMenuOpen
-u div elementu za Profile dropdown button, button elementu dodajemo dogadaj onClick
-u dodajemo onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju setIsProfileMenuOpen
-dodajemo uslov {isProfileMenuOpen && (...)}

12. Active Links & Conditional Rendering
-u komponentu Navbar.jsx importujemo i kreiramo funkciju usePathname
-vrijednost funkcije usePathname() pohranjujemo u varijablu const pathname
-u div elementu za Desktop Menu Hidden below md screens, komponenti Link dodajemo dinamicku klasu
-u dinamicku klasu dodajemo uslov ternani operator pathname === '/'
-kreiramo state varijablu isLoggedIn i set funkciju setLoggedIn
-dodajemo nekoliko uslova {isLoggedIn && (...)}
-u div elementu za Right Side Menu dodajemo uslov {!isLoggedIn && (...)}

13. Homepage Components
-u folderu components kreiramo komponentu Hero.jsx
-kreiramo komponentu InfoBoxes.jsx
-u komponentu app/page.jsx importujemo komponente Hero.jsx i InfoBoxes.jsx
-kreiramo komponentu InfoBox.jsx
-u komponenti InfoBox.jsx funkciji InfoBox() dodajemo parametre destruktuirane props
-u komponentu InfoBoxes.jsx importujemo komponentu InfoBox
-kreiramo komponentu Footer.jsx
-u komponentu layout.jsx importujemo komponentu Footer.jsx

14. Properties Page
-kreiramo komponentu PropertyCard.jsx

15. Property Card Dynamic Data
-u komponenti PropertyCard.jsx, funkciji PropertyCard() dodajemo parametar destruktuirani prop property
-kreiramo funkciju getRateDisplay()
-importujemo React ikonice
-dinamicki prikazujemo podatke u jsx-u

16. Home Property Listings
-u folderu components kreiramo komponentu HomeProperties.jsx
-u komponentu app/page.jsx importujemo komponentu HomeProperties.jsx
-u komponenti HomeProperties.jsx u jsx dodajemo ternarni uslov recentProperties === 0 

17. Custom Not Found & Loading Pages
-u folderu app kreiramo komponentu not-found.jsx
-u folderu app kreiramo komponentu loading.jsx
-u terminalu instaliramo paket React Spinners
-u komponentu loading.jsx importujemo komponentu ClipLoader


Section 3: Database, API Routes & Property Components

18. Create MongoDB Database
-kreiramo fajlove .env.local i .env.local.example
-u env.local fajlu kreiramo varijable NEXT_PUBLIC_DOMAIN, NEXT_PUBLIC_API_DOMAIN i MONGODB_URI

19. MongoDB Compass & Importing Data
-u MongoDB bazi podataka kreiramo bazu sa imenom propertypulse
-u bazi propertypulse kreiramo kolekciju properties
-kreiramo properties-mongo.json fajl
-taj fajl importujemo u kolekciju properties

20. Database Connection & Mongoose
-kreiramo folder config
-u folderu config kreiramo database.js fajl
-u terminalu instaliramo pakete MongoDB i Mongoose
-u database.js fajl importujemo paket mongoose
-kreiramo varijablu let connected
-kreiramo asinhronu funkciju connectDB()
-u funkciju connectDB() dodajemo metodu mongoose.set()
-dodajemo uslov if (connected)
-dodajemo blokove koda try - catch
-u terminalu instaliramo paket Colors

21. Your First API Route
-u folderu app kreiramo folder api
-u folderu api kreiramo folder properties i route.js fajl
-u route.js fajlu kreiramo i eksportujemo asinhronu funkciju GET()
-u funkciju GET dodajemo blokove koda try - catch
-otvorimo link http://localhost:3000/api/properties
-importujemo funkciju connectDB
-u blok koda try dodajemo funkciju connectDB()

22. Property & User Models
-kreiramo folder models
-u folderu models kreiramo User.js fajl
-u User.js fajlu kreiramo funkciju new Schema({ ... })
-vrijednost funkcije new Schema() pohranjujemo u varijablu const UserSchema
-importujemo objekte iz paketa Mongoose
-kreiramo varijablu const User
-varijablu User eksportujemo kao default
-u folder models kreiramo Property.js fajl
-u Property.js fajlu kreiramo funkciju new Schema({ ... })
-vrijednost funkcije new Schema() pohranjujemo u varijablu const PropertySchema
-kreiramo varijablu const Property
-varijablu const Property eksportujemo kao default

23. Fetch Data Using Server Component
-u properties/route.js fajl importujemo model Property
-dodajemo metodu await Property.find({ });
-vrijednost metode Property.find() pohranjujemo u varijablu const properties
-u komponenti properties/page.jsx kreiramo asinhronu funkciju  fetchProperties()
-u funkciju fetchProperties() dodajemo blokove koda try - catch
-u bloku koda try kreiramo varijablu const res
-dodajemo uslov if (!res.ok)
-dodajemo return res.json()
-varijabli properties dodajemo metodu sort()
-u komponenti HomeProperties.jsx kreiramo funkciju fetchProperties() 
-kreiramo varijablu const properties

24. Requests File
-kreiramo folder utils i requests.js fajl
-u requests.js fajlu kreiramo i eksportujemo asinhronu funkciju fetchProperties()
-u komponentu HomeProperties.jsx importujemo funkciju fetchProperties()
-u komponentu properties/page.js importujemo funkciju fetchProperties()
-u requests.js fajlu kreiramo varijablu const apiDomain
-u funkciju fetchProperties() dodajemo uslov if (!apiDomain)

25. Fetch Single Property
-u folderu properties kreiramo folder [id]
-u folderu [id] kreiramo route.js fajl
-u [id]/route.js fajlu kreiramo i eksportujemo asinhronu funkciju GET()
-funkciji GET dodajemo parametre request i { params }
-u komponentu [id]/page.jsx dodajemo direktivu 'use client'
-importujemo funkcije useState i useEffect
-importujemo funkciju useParams iz paketa Next Navigation
-u requests.js fajlu kreiramo i eksportujemo asinhronu funkciju fetchProperty(id)
-u komponentu [id]/page.jsx importujemo funkciju fetchProperty
-iz funkciji useParams() destruktuiramo varijablu const { id }
-kreiramo state varijable property i loading
-kreiramo set funkcije setProperty i setLoading
-kreiramo funkciju useEffect()
-u funkciji useEffect() kreiramo anonimnu funkciju fetchPropertyData
-u funkciju fetchPropertyData dodajemo uslov if (!id) return
-dodajemo blokove koda try - catch - finally
-u bloku koda try kreiramo varijablu const property
-dodajemo funkciju setProperty(property)
-u blok koda finally dodajemo funkciju setLoading(false)
-u funkciju useEffect() dodajemo uslov if (property === null)
-u uslov if dodajemo funkciju fetchPropertyData()

26. Single Property Page
-u folderu components kreiramo komponentu PropertyHeaderImage.jsx
-u komponentu [id]/page.jsx importujemo komponentu PropertyHeaderImage.jsx
-dodajemo uslov if (!property && !loading)
-u return izjavu dodajemo komponentu PropertyHeaderImage
-komponenti PropertyHeaderImage dodajemo prop image
-u komponenti PropertyHeaderImage.jsx, funkciji PropertyHeaderImage() dodajemo parametar destruktuirani prop image
-importujemo komponente Image iz paketa Next Image
-u tailwind.config.js fajlu dodajemo konfiguracione objekte fontFamily i gridTemplateColumns

27. Property Details Component
-u folderu components kreiramo komponentu PropertyDetails.jsx
-iz komponente [id]/page.jsx kopiramo main HTML element i sadrzaj unutar njega u komponentu PropertyDetails.jsx
-u return izjavi komponenti PropertyDetails dodajemo prop property
-u komponenti PropertyDetails.jsx funkciji PropertyDetails() dodajemo parametar destruktuirani prop property
-u return izjavi dodajemo nekoliko ternarnih uslova property?.rates ? (...) : (...)
-dinamicki prikazujemo vrijednost varijabli
-dodajemo metodu property?.amenities?.map()

28. Spinner Component
-u folderu components kreiramo komponentu Spinner.jsx
-u komponentu [id]/page.jsx importujemo komponentu Spinner.jsx


Section 4: Next Auth, Sessions & Google Providers

29. Google OAuth Setup
-otvorimo link https://console.cloud.google.com/
-kreiramo novi projekt 
-u .env.local fajlu kreiramo varijable GOOGLE_CLIENT_ID i GOOGLE_CLIENT_SECRET

30. Next Auth & Provider Setup
-otvorimo link https://next-auth.js.org/
-u terminalu instaliramo paket Next Auth sa komandom npm i next-auth
-u folderu app/api kreiramo folder auth
-u folderu auth kreiramo folder [...nextauth]
-u folderu [...nextauth] kreiramo route.js fajl
-u folderu utils kreiramo authOptions.js fajl
-u authOptions.js fajlu kreiramo i eksportujemo konfiguracioni objekt authOptions
-u konfiguracionom objektu authOptions kreiramo konfiguracione niz providers i konfiguracioni objekt callbacks
-u objektu callbacks kreiramo asinhrone funkcije signIn() i session()
-u app/api/auth/[...nextauth] folderu u route.js fajl importujemo objekt authOptions i funkciju NextAuth
-kreiramo funkciju NextAuth(authOptions)
-vrijednost funkcije NextAuth() pohranjujemo u varijablu const handler
-eksportujemo funkciju handler kao GET i POST

31. Session Provider Wrapper
-u folderu components kreiramo komponentu AuthProvider.jsx
-u komponentu AuthProvider.jsx importujemo komponentu SessionProvider iz paketa Next Auth
-funkciji AuthProvider() dodajemo parametar destruktuirani prop children
-u komponentu layout.jsx importujemo komponentu AuthProvider.jsx
-kreiramo nove varijable NEXT_AUTH_URL, NEXT_AUTH_URL_INTERNAL, NEXT_AUTH_URL_SECRET u .env fajlu
-u terminal ukucamo komandu openssl rand -base64 32 da generisemo Next Auth Secret
-u komponentu AuthProvider.jsx dodajemo direktivu 'use client'

32. Sign In Button
-u komponentu Navbar.jsx importujemo funkcije  signIn, signOut, useSession, getProviders 
-kreiramo funkciju useSession()
-iz funkcije useSession() destruktuiramo varijablu const { data: session }
-u komponenti Navbar.jsx u return izjavi umjesto uslova isLoggedIn && (...) dodajemo session && (...)
-preimenujemo varijablu isLoggedIn u providers, a set funkciju setIsLoggedIn u setProviders
-importujemo i kreiramo funkciju useEffect()
-u funkciji useEffect() kreiramo asinhronu funkciju setAuthProviders
-u funkciji setAuthProviders() kreiramo varijablu const res
-dodajemo set funkciju setProviders u koju proslijedujemo vrijednost varijable res
-pozivamo funkciju setAuthProviders()
-u return izjavi dodajemo metodu {providers && Object?.values(providers)?.map()}
-u metodu map dodajemo button element
-button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju signIn()
-dodajemo metodu {!session && providers && Object?.values(providers)?.map()} za mobile menu 

33. Save User to Databse & Session
-u authOptions.js fajl importujemo funkciju connectDB() i model User
-u funkciju signIn() dodajemo funkciju await connectDB()
-kreiramo varijablu const userExists
-dodajemo uslov if (!userExists)
-u uslovu if (!userExists) kreiramo varijablu const username 
-dodajemo metodu await User.create({ ... })
-dodajemo return true
-u funkciji session() kreiramo varijablu const user
-dodajemo metodu session?.user?.id = User?._id.toString()
-dodajemo return session

34. Profile Image
-u komponenti Navbar.jsx kreiramo varijablu const profileImage
-u komponentu Image za korisnika proslijedujemo u prop src vrijednost varijable profileImage
-u next.config.js fajl dodajemo objekt konfiguracioni objekt images

35. Sign Out & Protect Routes
-u komponenti Navbar.jsx, button elementu Sign Out dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju signOut()
-kreiramo middleware.js fajl
-u middleware.js fajlu eksportujemo funkciju default
-kreiramo i eksportujemo konfiguracioni objekt varijablu const config
-u komponenti Navbar.jsx komponentama Link Your Profile i Saved Properties dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju setIsProfileMenuOpen(false) da se menu ukloni kada kliknemo na profil i sacuvane nekretnine
